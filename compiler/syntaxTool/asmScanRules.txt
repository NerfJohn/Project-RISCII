################################################################################
# Assembler/Linker Scanner Rules
################################################################################

## -- Scanner Starting State -- ##
_SUB_START:
	# Start of instruction keywords.
	IS	S		_s
	IS	A		_a
	IS	L		_l
	IS	J		_j
	IS	O		_o
	IS	X		_x
	IS	B		_b
	IS	N		_n
	IS	H		_h
	
	# Start of macro keywords.
	IS	_		_mac_
	
	# Start of directives.
	IS	.		_dir_
	
	# Start of registers.
	IS	$		_reg
	
	# Start of string.
	IS	"		_string
	
	# General colon (for declaring labels).
	IS	:		_colon
	
	# Start of flags (a,s,nzpc)
	IS	a		_flgValid
	IS	s		_flgValid
	IS	n		_flgN
	IS	z		_flgZ
	IS	p		_flgP
	IS	c		_flgValid

	# Start of immediates (decimal or hex).
	IS	+		_immSign
	IS	-		_immSign
	IS	0		_imm0
	IN	1	9	_immDecimal

	# Start of labels- check AFTER keyword starts.
	IN	a	z	_label
	IN	A	Z	_label
	IS	_		_label
	
	# Skip whitespace characters for token recognition.
	IS	\t		_SUB_START
	IS	\s		_SUB_START
	IS	\n		_SUB_START
	IS	\r		_SUB_START
	
	# Start of comment.
	IS	;		_comment
	
	# EOF- Acknowledge via token.
	EOF			TOKEN_EOF
	
	# (Must have else clause).
	ELSE		_SUB_ERROR

###                             ###
# -- Transition-Focused States -- #
###                             ###

## -- +- Sign: can only precede a decimal value -- ##
_immSign:
	IN	0	9	_immDecimal

	# (Must have else clause).
	ELSE		_SUB_ERROR

## -- "0" Character: either hex prefix (0x) or decimal (value 0) -- ##
_imm0:
	IS	x		_imm0x
	IN	0	9	_immDecimal
	ELSE		TOKEN_IMMEDIATE

## -- "0x" Prefix: must be followed by hex value -- ##
_imm0x:
	HEX			_immHex

	# (Must have else clause).
	ELSE		_SUB_ERROR

## -- "$" prefix: must match numbered or named registers -- ##
_reg:
	IN	0	7	_regValid
	IS	r		_regNum
	IS	a		_regX
	IS	b		_regX
	IS	f		_regP
	IS	s		_regP
	
	# (Must have else clause).
	ELSE		_SUB_ERROR

## -- Escaped Char: few select options, then back to string -- ##
_escChar:
	IS	n		_string
	IS	r		_string
	IS	t		_string
	IS	0		_string
	IS	\\		_string
	IS	"		_string
	IS	x		_escHex0
	ELSE		_SUB_ERROR

## -- Escaped Hex: should specify uint8_t via 1-2 hex chars -- ##
_escHex0:
	HEX			_escHex1
	ELSE		_SUB_ERROR

_escHex1:
	HEX			_escHex2
	IS	\\		_escChar
	IS	"		_strValid
	ELSE		_string

_escHex2:
	IS	\\		_escChar
	IS	"		_strValid
	ELSE		_string

## -- Branch flags: "nzpc"- one of each, must be in order -- ##
_flgN:
	IS	z		_flgZ
	IS	p		_flgP
	IS	c		_flgValid
	LBL			_label
	ELSE		TOKEN_FLAG

_flgZ:
	IS	p		_flgP
	IS	c		_flgValid
	LBL			_label
	ELSE		TOKEN_FLAG
	
_flgP:
	IS	c		_flgValid
	LBL			_label
	ELSE		TOKEN_FLAG

_flgValid:
	LBL			_label
	ELSE		TOKEN_FLAG
	
###                 ###
# -- "Loop" States -- #
###                 ###

## -- Label: made of typical identifier characters -- ##
_label:
	LBL			_label
	ELSE		TOKEN_LABEL

## -- Decimal Immediate: made of digits (0-9) -- ##
_immDecimal:
	IN	0	9	_immDecimal
	ELSE		TOKEN_IMMEDIATE

## -- Hex Immediate: made of hex digits (0-9,a-f) -- ##
_immHex:
	HEX			_immHex
	ELSE		TOKEN_IMMEDIATE

## -- String: most chars + some escape chars -- ##
_string:
	IS	\\		_escChar
	IS	"		_strValid
	ELSE		_string

## -- Comment: Takes entire line -- ##
_comment:
	IS	\n		TOKEN_COMMENT
	ELSE		_comment

###                      ###
# -- "Mid-Keyword Zone" -- #
###                      ###

_s:
	IS	H		_sh
	IS	U		_su
	IS	T		_st
	IS	W		_sw
	LBL			_label
	ELSE		TOKEN_LABEL

_sh:
	IS	L		_shl
	IS	R		_shr
	LBL			_label
	ELSE		TOKEN_LABEL

_su:
	IS	B		_sub
	LBL			_label
	ELSE		TOKEN_LABEL

_st:
	IS	R		_str
	LBL			_label
	ELSE		TOKEN_LABEL

_sw:
	IS	P		_swp
	LBL			_label
	ELSE		TOKEN_LABEL

_a:
	IS	N		_an
	IS	D		_ad
	LBL			_label
	ELSE		TOKEN_LABEL

_an:
	IS	D		_and
	LBL			_label
	ELSE		TOKEN_LABEL

_ad:
	IS	D		_add
	LBL			_label
	ELSE		TOKEN_LABEL

_l:
	IS	B		_lb
	IS	D		_ld
	ELSE		TOKEN_LABEL

_lb:
	IS	I		_lbi
	ELSE		TOKEN_LABEL

_ld:
	IS	R		_ldr
	ELSE		TOKEN_LABEL

_j:
	IS	P		_jp
	IS	L		_jl
	ELSE		TOKEN_LABEL

_jp:
	IS	R		_jpr
	ELSE		TOKEN_LABEL

_jl:
	IS	R		_jlr
	ELSE		TOKEN_LABEL

_o:
	IS	R		_or
	ELSE		TOKEN_LABEL

_or:
	IS	R		_orr
	ELSE		TOKEN_LABEL

_x:
	IS	O		_xo
	ELSE		TOKEN_LABEL

_xo:
	IS	R		_xor
	ELSE		TOKEN_LABEL

_b:
	IS	R		_br
	ELSE		TOKEN_LABEL

_br:
	IS	C		_brc
	ELSE		TOKEN_LABEL

_n:
	IS	O		_no
	ELSE		TOKEN_LABEL

_no:
	IS	P		_nop
	ELSE		TOKEN_LABEL

_h:
	IS	L		_hl
	ELSE		TOKEN_LABEL

_hl:
	IS	T		_hlt
	ELSE		TOKEN_LABEL

_mac_:
	IS	l		_mac_l
	IS	s		_mac_s
	IS	d		_mac_d
	IS	t		_mac_t
	
	# "_" can technically be a label.
	ELSE		TOKEN_LABEL

_mac_l:
	IS	d		_mac_ld
	ELSE		TOKEN_LABEL

_mac_s:
	IS	t		_mac_st
	ELSE		TOKEN_LABEL

_mac_d:
	IS	s		_mac_ds
	ELSE		TOKEN_LABEL

_mac_t:
	IS	o		_mac_to
	ELSE		TOKEN_LABEL

_dir_:
	IS	w		_dir_w
	IS	a		_dir_a
	ELSE		TOKEN_LABEL

_dir_w:
	IS	o		_dir_wo
	ELSE		TOKEN_LABEL

_dir_wo:
	IS	r		_dir_wor
	ELSE		TOKEN_LABEL

_dir_wor:
	IS	d		_dir_word
	ELSE		TOKEN_LABEL

_dir_a:
	IS	r		_dir_ar
	IS	d		_dir_ad
	ELSE		TOKEN_LABEL

_dir_ar:
	IS	r		_dir_arr
	ELSE		TOKEN_LABEL

_dir_arr:
	IS	y		_dir_arry
	ELSE		TOKEN_LABEL

_dir_ad:
	IS	d		_dir_add
	ELSE		TOKEN_LABEL

_dir_add:
	IS	r		_dir_addr
	ELSE		TOKEN_LABEL

_regNum:
	IN	0	3	_regValid
	ELSE		_SUB_ERROR

_regX:
	IS	x		_regValid
	ELSE		_SUB_ERROR

_regP:
	IS	p		_regValid
	ELSE		_SUB_ERROR

###                         ###
# -- "Finish-Keyword Zone" -- #
###                         ###

_shl:
	LBL			_label
	ELSE		TOKEN_SHL

_shr:
	LBL			_label
	ELSE		TOKEN_SHR

_sub:
	LBL			_label
	ELSE		TOKEN_SUB

_str:
	LBL			_label
	ELSE		TOKEN_STR

_swp:
	LBL			_label
	ELSE		TOKEN_SWP

_and:
	LBL			_label
	ELSE		TOKEN_AND

_add:
	LBL			_label
	ELSE		TOKEN_ADD

_lbi:
	LBL			_label
	ELSE		TOKEN_LBI

_ldr:
	LBL			_label
	ELSE		TOKEN_LDR

_jpr:
	LBL			_label
	ELSE		TOKEN_JPR
	
_jlr:
	LBL			_label
	ELSE		TOKEN_JLR

_orr:
	LBL			_label
	ELSE		TOKEN_ORR

_xor:
	LBL			_label
	ELSE		TOKEN_XOR

_brc:
	LBL			_label
	ELSE		TOKEN_BRC

_nop:
	LBL			_label
	ELSE		TOKEN_NOP

_hlt:
	LBL			_label
	ELSE		TOKEN_HLT

_mac_ld:
	LBL			_label
	ELSE		TOKEN_LD

_mac_st:
	LBL			_label
	ELSE		TOKEN_ST

_mac_ds:
	LBL			_label
	ELSE		TOKEN_DS

_mac_to:
	LBL			_label
	ELSE		TOKEN_TO

_dir_word:
	LBL			_label
	ELSE		TOKEN_WORD

_dir_arry:
	LBL			_label
	ELSE		TOKEN_ARRY

_dir_addr:
	LBL			_label
	ELSE		TOKEN_ADDR

_regValid:
	!LBL		TOKEN_REGISTER
	ELSE		_SUB_ERROR

_strValid:
	ELSE		TOKEN_STRING

_colon:
	ELSE		TOKEN_COLON