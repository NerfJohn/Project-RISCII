; Stress test of core implementation regarding instruction vs interrupt vs pause
;
; Note: Test REQUIRES TEMP CHANGE such that Timer 1's interrupt causes a pause
;
; Test Philosophy: Try every sequential combo for varying interrupt/pause locations
;				       (Combo inputs based on ticks taken to perform/op uniqueness)
;
; Combo Inputs:
;	a) data op  (2 cycles w/ shared 2nd cycle)
;	b) jump op  (2 cycles w/ jumping, no sharing- trusting BRC represents JLR and JPR)
;	c) ld/st op (3 cycles w/ mem op, no sharing)
;	d) swap op  (4 cycles w/ mem op, no sharing- unique cycle count compared to ld/st)


__START:

; (Reset Vector)
_la			$5 main
JPR			$5 0
HLT

HLT						; Vector 1
HLT
HLT
HLT

HLT						; Vector 2
HLT
HLT
HLT

HLT						; Vector 3
HLT
HLT
HLT

HLT						; Vector 4
HLT
HLT
HLT

HLT						; Vector 5
HLT
HLT
HLT

HLT						; Vector 6
HLT
HLT
HLT

HLT						; Vector 7
HLT
HLT
HLT

; Vector 8- TMR0 interrupt
STR			$4 $0 0		; Stop TMR0
STR			$5 $3 0		; Clear TMR0 enable
STR			$5 $3 1		; Clear TMR0 flag
JPR			%r			; RTI

HLT						; Vector 9
HLT
HLT
HLT

HLT						; Vector 10
HLT
HLT
HLT

HLT						; Vector 11
HLT
HLT
HLT

main:
; Disable WDT
LBI			$1 -128		; R1 = 0x8010 (WDT base addr)
LBI	%s		$1 0x10
LBI			$2 0x1
STR			$2 $1 0

; Setup registers
LBI			$0 -128		; R0 = 0x8020 (TMR0 base addr/TMR1 base addr - 4)
LBI	%s		$0 0x20
LBI			$1 0x00		; R1 = 0x0030 (Start # of cycles TMR0 runs for)
LBI	%s		$1 0x30
LBI			$2 0x00		; R2 = 0x0030 (Start # of cycles TMR1 runs for)
LBI	%s		$2 0x30
LBI			$3 -128		; R3 = 0x8008 (NVIC base addr)
LBI	%s		$3 0x08
LBI			$4 0x01		; R4 = 0x0100 (TMR0 interrupt set mask)
LBI	%s		$4 0x00

						; (R5 = intermediate)
						; (R6 = memory ptr)
						; (R7 = test data)
						
test_loop:				; BEGINNING OF TESTING LOOP (PC Addr = 0x007C)

; Prep timers
LBI			$5 0		; R5 = 0
STR			$5 $0 1		; TMR0 count clear
STR			$1 $0 2		; TMR0 max count set
STR			$5 $0 5		; TMR1 count clear
STR			$2 $0 6		; TMR1 max count set

; Prep interrupts
LBI			$5 0		; R5 = 0
STR			$5 $3 1		; Clear flags
STR			$4 $3 0		; Enable TMR0 interrupt

; Prep data/registers for test
mem: .bss 6
_la			$6 mem		; Setup memory ptr
LBI			$5 1		; MEM[0] = 1
STR			$5 $6 0
LBI			$5 2		; MEM[1] = 2
STR			$5 $6 1
LBI			$5 3		; MEM[2] = 3
STR			$5 $6 2
LBI			$7 0		; R7 = 0

; Begin timers 0 and 1 (in that order)
LBI			$5 0x1
STR			$5 $0 0
STR			$5 $0 4

; CORE STRESS TEST		; OPERATION		FLOW    R   M0  M1  M2 PC
;-----------------------;----------------------------------------
LBI			$7 5		; R7 = 5		(- > D) 5 / 1 / 2 / 3 |
ADD			$7 $7 1		; R7++			(D > D) 6 / 1 / 2 / 3 |
LDR			$7 $6 0		; R7 <- MEM0	(D > M) 1 / 1 / 2 / 3 |
STR			$7 $6 1		; MEM1 <- R7	(M > M) 1 / 1 / 1 / 3 |
ADD			$7 $7 1		; R7++			(M > D) 2 / 1 / 1 / 3 |
SWP			$7 $6 0		; R7 <-> MEM0	(D > S) 1 / 2 / 1 / 3 |
LDR			$7 $6 2		; R7 <- MEM2	(S > M) 3 / 2 / 1 / 3 |
SWP			$7 $6 1		; R7 <-> MEM1	(M > S) 1 / 2 / 3 / 3 |
SWP			$7 $6 2		; R7 <-> MEM2	(S > S) 3 / 2 / 3 / 1 |
ADD			$7 $7 1		; R7++			(S > D) 4 / 2 / 3 / 1 |
BRC	%nzp	1			; Skip 1		(D > J) 4 / 2 / 3 / 1 |
LBI			$7 -2		; R7 = -2		(NORUN)               |
SWP			$7 $6 2		; R7 <-> MEM2	(J > S) 1 / 2 / 3 / 4 |
BRC	%nzp	1			; Skip 1		(S > J) 1 / 2 / 3 / 4 |
LBI			$7 -4		; R7 = -4		(NORUN)               |
LDR			$7 $6 0		; R7 <- MEM0	(J > M) 2 / 2 / 3 / 4 |
BRC	%nzp	1			; Skip 1		(M > J) 2 / 2 / 3 / 4 |
LBI			$7 -8		; R7 = -8		(NORUN)               |
BRC	%nzp	1			; Skip 1		(J > J) 2 / 2 / 3 / 4 |
LBI			$7 -16		; R7 = -16		(NORUN)               |
ADD			$7 $7 1		; R7++			(J > D) 3 / 2 / 3 / 4 |

; Stop timers 0 and 1 (in that order)
LBI			$5 0x0
STR			$5 $0 0
STR			$5 $0 4

; Halt for analysis
HLT						; PC Addr = 0x00D4

; Stop testing once both timers have been exhausted.
ADD 		$5 $1 $2	; Get sum of timers' max counts
BRC	%np		3			; if at least one isn't 0, continue
_la			$5 end_loop	; else, break from test loop
JPR			$5 0

; Adjust Timer 0/1
ADD			$5 $1 0		; Get ccodes of Timer 0 max count
BRC	%np		4			; if NOT zero, continue to decrement
ADD			$2 $2 -1	; else, decrement Timer 1 max count...
LBI			$1 0x00		; ...and reset Time 0 max count
LBI	%s		$1 0x30
BRC	%nzp	1			; (skip 'if' clause)
ADD			$1 $1 -1	; decrement Timer 0 max count

; Repeat test loop
_la			$5 test_loop
JPR			$5 0

end_loop:				; END OF TESTING LOOP

; End of testing- HLT for good
HLT						; PC Addr = 0x00F4