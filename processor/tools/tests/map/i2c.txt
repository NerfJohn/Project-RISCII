;===============================================================================
; Test program checking I2C works.
;
; This file "RISCII Asm Semantics":
; R0 = free         | open for use
; R1 = free         | open for use
; R2 = free         | open for use
; R3 = free         | open for use
; R4 = free         | open for use
; R5 = return value | value returned by a function
; R6 = return link  | address function returns to
; R7 = stack ptr    | lowest valid stack address
;===============================================================================

;===============================================================================
; Function: i2c_init (Inits GPIO/I2C registers with given baud rate).
; (R0 = baud rate, No Returns)
i2c_init:
; Context save
ADD		$7 $7 -10						; Reserve 5 slots
STR		$0 $7 4							; Save R0-R4
STR		$1 $7 3
STR		$2 $7 2
STR		$3 $7 1
STR		$4 $7 0

; Setup refs
LBI		$3 -128							; R3 = 0x8018 (GPIO base address)
LBI	%s	$3 0x18
LBI		$4 -128							; R4 = 0x8048 (I2C base address)
LBI %s	$4 0x48

; Config GPIOs for I2C
LBI		$1 -49							; R1 = 0xCFFF (pin 12/13 clr mask)
LBI	%s	$1 -1
LDR		$2 $3 3							; Load GPIO_OUT
AND		$2 $1 $2						; Clr pin 12/13 outs
STR		$2 $3 3							; Store GPIO_OUT
XOR		$1 $1 -1						; R1 = 0x3000 (pin 12/13 set mask)
LDR		$2 $3 0							; Load GPIO_CFG
ORR		$2 $1 $2						; Set pin 12 (pin 13 is read only)
STR		$2 $3 0							; Store GPIO_CFG

; Config I2C for baud (+enable)
STR		$0 $4 1							; Set I2C_BAUD
LBI		$1 0x1							; R1 = 0x0001 (I2C enable, no params)
STR		$1 $4 0							; Set I2C_CTRL

; Context restore
LDR		$0 $7 4							; Restore R0-R4
LDR		$1 $7 3
LDR		$2 $7 2
LDR		$3 $7 1
LDR		$4 $7 0
ADD		$7 $7 10						; Free 5 slots

; Return
JPR		$6 0

;===============================================================================
; Function: i2c_rd16 (Reads 16-bit value from given i2c address and register)
; (R0 = addr, R1 = reg, R2 = ptr to acks, Returns R5 = read value)
i2c_rd16:
; Context save
ADD		$7 $7 -10						; Reserve 5 slots
STR		$0 $7 4							; Save R0-R4
STR		$1 $7 3
STR		$2 $7 2
STR		$3 $7 1
STR		$4 $7 0

; Setup refs
LBI		$4 -128							; R4 = 0x8048 (I2C base address)
LBI %s	$4 0x48

; Send addr+write (to set register)
LBI		$3 0x0D							; R3 = 0x000D (start+wr+enable)
AND		$0 $0 -2						; Clr bit 0 (i2c write)
STR		$3 $4 0							; Set I2C_CTRL
STR		$0 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
STR		$3 $2 0							; Save "Ack" to de-ref ptr

; Send register
LBI		$3 0x07							; R3 = 0x0007 (wr+stop+enable)
STR		$3 $4 0							; Set I2C_CTRL
STR		$1 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
LDR		$1 $2 0							; Load "Acks"
ORR		$1 $1 $3						; OR together ack statuses
STR		$1 $2 0							; Save "Acks"

; Send addr+read (to read value)
LBI		$3 0x0D							; R3 = 0x000D (start+wr+enable)
ORR		$0 $0 0x1						; Set bit 0 (i2c read)
STR		$3 $4 0							; Set I2C_CTRL
STR		$0 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
LDR		$1 $2 0							; Load "Acks"
ORR		$1 $1 $3						; OR together ack statuses
STR		$1 $2 0							; Save "Acks"

; Read upper byte
LBI		$3 0x01							; R3 = 0x0001 (rdn+enable)
STR		$3 $4 0							; Set I2C_CTRL
STR		$3 $4 2							; Set I2C_DATA (starts read)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
LDR		$1 $2 0							; Load "Acks"
ORR		$1 $1 $3						; OR together ack statuses
STR		$1 $2 0							; Save "Acks"
LDR		$5 $4 2							; Save read byte

; Read lower byte
LBI		$3 0x03							; R3 = 0x0003 (rdn+stop+enable)
STR		$3 $4 0							; Set I2C_CTRL
STR		$3 $4 2							; Set I2C_DATA (starts read)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle

; Process outputs
LDR		$1 $2 0							; Load "Acks"
ORR		$1 $1 $3						; OR together ack statuses
SHR		$1 $1 14						; Bring ack status to LSb
AND		$1 $1 0x1						; Extract ack status
STR		$1 $2 0							; Save "Acks"
LDR		$3 $4 2							; Get lower byte
SHL		$5 $5 8							; Bring upper byte into position
ORR		$5 $3 $5						; Combine upper/lower bytes

; Context restore
LDR		$0 $7 4							; Restore R0-R4
LDR		$1 $7 3
LDR		$2 $7 2
LDR		$3 $7 1
LDR		$4 $7 0
ADD		$7 $7 10						; Free 5 slots

; Return
JPR		$6 0

;===============================================================================
; Function: i2c_wr16 (Writes 16-bit value to given i2c address and register)
; (R0 = addr, R1 = reg, R2 = value, Returns R5 = acks)
i2c_wr16:
; Context save
ADD		$7 $7 -10						; Reserve 5 slots
STR		$0 $7 4							; Save R0-R4
STR		$1 $7 3
STR		$2 $7 2
STR		$3 $7 1
STR		$4 $7 0

; Setup refs
LBI		$4 -128							; R4 = 0x8048 (I2C base address)
LBI %s	$4 0x48

; Send addr+write (to set register)
LBI		$3 0x0D							; R3 = 0x000D (start+wr+enable)
AND		$0 $0 -2						; Clr bit 0 (i2c write)
STR		$3 $4 0							; Set I2C_CTRL
STR		$0 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
ADD		$5 $3 0							; Save ack status to return

; Send register
LBI		$3 0x05							; R3 = 0x0005 (wr+enable)
STR		$3 $4 0							; Set I2C_CTRL
STR		$1 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
ORR		$5 $3 $5						; OR together ack statuses

; Send upper byte
LBI		$3 0x05							; R3 = 0x0005 (wr+enable)
SHR		$0 $2 8							; Get upper byte
STR		$3 $4 0							; Set I2C_CTRL
STR		$0 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle
ORR		$5 $3 $5						; OR together ack statuses

; Send lower byte
LBI		$3 0x07							; R3 = 0x0007 (wr+stop+enable)
STR		$3 $4 0							; Set I2C_CTRL
STR		$2 $4 2							; Set I2C_DATA (starts write)
LDR		$3 $4 0							; Get I2C_CTRL
ADD		$3 $3 0							; Get "is idle" status (bit 15)
BRC	%zp	-3								; Repeat check if still idle

; Process outputs
ORR		$5 $3 $5						; OR together ack statuses
SHR		$5 $5 14						; Bring ack status to LSb
AND		$5 $5 0x1						; Extract ack status

; Context restore
LDR		$0 $7 4							; Restore R0-R4
LDR		$1 $7 3
LDR		$2 $7 2
LDR		$3 $7 1
LDR		$4 $7 0
ADD		$7 $7 10						; Free 5 slots

; Return
JPR		$6 0

;===============================================================================
;===============================================================================
;===============================================================================

__START:
_la 	$7 main							; (Reset Vector)
JPR 	$7 0
HLT

HLT										; Vector 1
HLT
HLT
HLT

HLT										; Vector 2
HLT
HLT
HLT

; Vector 3- I2C complete
STR		$0 $7 -1
_la		$0 int_i2c
JPR		$0 0

HLT										; Vector 4
HLT
HLT
HLT

HLT										; Vector 5
HLT
HLT
HLT

HLT										; Vector 6
HLT
HLT
HLT

HLT										; Vector 7
HLT
HLT
HLT

HLT										; Vector 8
HLT
HLT
HLT

HLT										; Vector 9
HLT
HLT
HLT

HLT										; Vector 10
HLT
HLT
HLT

HLT										; Vector 11
HLT
HLT
HLT

;===============================================================================
; ISR: int_i2c (Interrupt routine for I2C byte transfer- assumes R0 saved)
; (No Params, No Returns)
int_i2c:
; Marked HLT point
LBI		$7 0x63
HLT

;===============================================================================
; Function: main (Main application program being run)
; (No Params, No Returns)
main:
; Init registers
_la		$4 __FREE						; R4 = free mem base address
LBI		$7 0x7F							; R7 = 0x7FFE (top of free memory)
LBI %s	$7 -2

; Turn off WDT
LBI		$0 -128							; R0 = 0x8010 (WDT base address)
LBI	%s	$0 0x10
LBI		$1 0x01							; R1 = 0x0001 (bit 0 set mask)
STR		$1 $0 0							; Set WDT_CTRL

; I2C inputs (config via JTAG)
cfgs: .data {0x0028 0x0088 0x0002 0xbeef}

; Init I2C
_la		$0 cfgs							; Get "cfgs" ref
LDR		$0 $0 0							; Get "baud" arg
_la		$3 i2c_init						; Call "i2c_init"
JLR		$6 $3 0

; Read OPT3001's dev id (0x7F = 0x3001)
_la		$2 cfgs							; Get "cfgs" ref
LDR		$0 $2 1							; Get "addr" arg
LBI		$1 0x7F							; Set "reg" arg
ADD		$2 $4 0							; Set "ack ptr" arg (to FREE+0)
_la		$3 i2c_rd16						; Call "i2c_rd16"
JLR		$6 $3 0
STR		$5 $4 1							; Save value to FREE+2

; Write OPT3001 register
_la		$2 cfgs							; Get "cfgs" ref
LDR		$0 $2 1							; Get "addr" arg
LDR		$1 $2 2							; Get "reg" arg
LDR		$2 $2 3							; Get "value" arg
_la		$3 i2c_wr16						; Call "i2c_wr16"
JLR		$6 $3 0
STR		$5 $4 2							; Save value to FREE+4

; Read OPT3001 register
_la		$2 cfgs							; Get "cfgs" ref
LDR		$0 $2 1							; Get "addr" arg
LDR		$1 $2 2							; Get "reg" arg
ADD		$2 $4 6							; Set "ack ptr" arg (to FREE+6)
_la		$3 i2c_rd16						; Call "i2c_rd16"
JLR		$6 $3 0
STR		$5 $4 4							; Save value to FREE+8

; Enable I2C interrupt
LBI		$1 -9							; R1 = 0xFFF7 (pin 3 clr mask)
LBI		$2 -128
LBI	%s	$2 0x08							; R2 = 0x8008 (NVIC base addr)
LDR		$3 $2 1							; Load NVIC_FLAG
AND		$3 $1 $3						; Clr pin 3
STR		$3 $2 1							; Store NVIC_FLAG
XOR		$1 $1 -1						; R1 = 0x0008 (pin 3 set mask)
LDR		$3 $2 0							; Load NVIC_ENABLE
ORR		$3 $1 $3						; Set pin 3
STR		$3 $2 0							; Store NVIC_ENABLE
LBI		$2 -128
LBI	%s	$2 0x48							; R2 = 0x8048 (I2C base addr)
STR		$0 $2 2							; Start I2C "ping"

; Spin forever (and for observation)
BRC %nzp -1
