================================================================================
Project RISCII: Cliff Notes
PRT0000
"General notes to be converted to formal document or temporarily saved"
================================================================================
General Project Notes:

Project RISCII- Challenge to design a dev kit system (vs buying or off shelf)
	- Demonstrate knowledge via design levels of systems together
	- Should try to design pieces vs relying on 3rd party hardware/software
	- Exact "design vs 3rd party" choices are subjective to personal preference
		(Generally guided by involvement with binary image run by dev kit)

Levels of Design
	- Source Code/Libraries (C/asm files- drivers and basic RTOS, bootloader?)
	- Compiler (multi files, preprocessor directives, C/IR/asm languages)
	- Microprocessor (16-bit processing, JTAG+debugging, interrupts+circuits)
	- Circuit Board (power regulated, programmable, devices to use MPU circuits)

================================================================================
Compiler (High) Feature/Design:

General Goals
	sources = C and static libraries
	outputs = binary images and static libraries
	options = optimize and debug
		(for debug: functional > performant/capabilities)

Static Libraries/Linking
	static lib = glorified asm file
	new asm directive: ".global"
		labels implicitly use internal linkage
		.global <label> gives local label global linkage
		internal > global linkage as applicable
		
Debugging
	backend adds NOPs to start of ".global" functions
		generated ".global" function labels point to NOP
		NOP used as SW breakpoint (can be replaced w/ HLT)
	asmld appends table of .global labels to binary image
		includes info needed to set/remove breakpoints
		can probe global data (+maps) at global function starts (or on stop)

Backend/Optimizer
	"Flattened" version of C code (in SSA form)
	Focused mainly on optimizing
		(eg not strict on declaration matching definition, usage, etc)
		(ie should in theory be "portable" code, though scope has 1 front/back)
	Optimizations based around SSA form + structure

================================================================================
Assembler/Linker Feature Set:

var types
	flags (%[low letters]): instruction specific bitmasks
	regs  ($[num])        : direct register for instruction
	int   (num or hex)    : constant value, sized to instruction's use or word
	str   (str lit w/ esc): byte array, 2 bytes per word w/ first in lower bits
		(0x00 appended to match word multiple)
	label (std var name)  : labelled text/data address
	array (bracketed vars): combo of int/str/labels, all resolved before whole
		(ie resolved in size, then array aligns/packs items to words)

directives
	.data: initialized data in .data section
	.bss : uninitialized data in .data section
	.glob: label (defined in this file) is accessible to all files on linking
	.weak: label (defined in this file) should be overriden if globl exists
	.part: labelled text/data (in file) forms section (till next .part-ed label)

(instructions heavily based on ISA layout)

funcs:
	_la: load value of label (or integer) into register
	_br: jump to label for condition (requires register to "burn")

defined labels
	__START: start of text section in image
	__SIZE : size of binary image
	__FREE : start of free memory in data section
	__BSS  : start of bss section
	
other
	comments (;)
	linking = local > global (besides .weak)
	can print debug global table w/ file
	can optimize using iterative part deletion + _br minimizing?
	limits based on known target sizes

