================================================================================
Project RISCII: Cliff Notes
PRT0000
"General notes to be converted to formal document or temporarily saved"
================================================================================
General Project Notes:

Project RISCII- Challenge to design a dev kit system (vs buying or off shelf)
	- Demonstrate knowledge via design levels of systems together
	- Should try to design pieces vs relying on 3rd party hardware/software
	- Exact "design vs 3rd party" choices are subjective to personal preference
		(Generally guided by involvement with binary image run by dev kit)

Levels of Design
	- Source Code/Libraries (C/asm files- drivers and basic RTOS, bootloader?)
	- Compiler (multi files, preprocessor directives, C/IR/asm languages)
	- Microprocessor (16-bit processing, JTAG+debugging, interrupts+circuits)
	- Circuit Board (power regulated, programmable, devices to use MPU circuits)

================================================================================
Compiler (High) Feature/Design:

General Goals
	sources = C and static libraries
	outputs = binary images and static libraries
	options = optimize and debug
		(for debug: functional > performant/capabilities)

Static Libraries/Linking
	static lib = glorified asm file
	new asm directive: ".global"
		labels implicitly use internal linkage
		.global <label> gives local label global linkage
		internal > global linkage as applicable
		
Debugging
	backend adds NOPs to start of ".global" functions
		generated ".global" function labels point to NOP
		NOP used as SW breakpoint (can be replaced w/ HLT)
	asmld appends table of .global labels to binary image
		includes info needed to set/remove breakpoints
		can probe global data (+maps) at global function starts (or on stop)

Backend/Optimizer
	"Flattened" version of C code (in SSA form)
	Focused mainly on optimizing
		(eg not strict on declaration matching definition, usage, etc)
		(ie should in theory be "portable" code, though scope has 1 front/back)
	Optimizations based around SSA form + structure

================================================================================
Assembler/Linker Brief (to make manual for):

(note: organize thoughts into "assembly language" vs "assembler implementation")

cmd line options
	help (-h) + version (-v): info that immediately exits
	output (-o) to name output file (vs default name)
	log level (-ll): varies info logged/printed
		silent  (when you REALLY need nothing- besides cli errors/asserts)
		error   (when you want brief of what went wrong)
		warning (brief + potential mistakes (or just adjustments))
		info    (when you want info on process + created image)
		debug   (when you worry asmld has an uncaught bug in it)
	debug (-g): add breakpoints + global table for debugging potential
	remove (-r): removes unuseds- NOT a 100% gurantee on removal or function

general "var" types
	flags: % + lowercase chars, specific to instruction/char
	reg: $ + decimal, specific to ISA
	imm: decimal or hex, size based on context
		tends to be ISA bit field vs word vs non-neg (ie ISA/Lang define)
		dec/hex interpreted with some difference
	label: name stand-in for address, ties to instruction or (init?) data, word
	str: string literal w/ certain escapes, MUST be on one line
		escs: \n \r \t \0 \" \\
		packing + endian is EXE SPECIFIC, var itself is LANG SPECIFIC
	arr: bracketed, whitespaced delimited array of imm/label/str types
		packs items prior to packing array, order is LANG specific

statement/node types
	instructions- "syntax mayhem", roughly based on ISA (can label)
	function- one built-in "instruction" (can label)
	label (decl): declares label (see linkage syntax)
	modifier: modifies local label (see linkage syntax)
	init data: initializes data in .data section (can label)
	uninit data: bss section factoring (can label)
	
linkage syntax
	labels link to next statement/node available IN FILE (no cross file)
		ties to text, data or bss section (important for removal flag)
	predef labels exist
		__START must be declared as text, is global/referenced by default
		__BSS/__FREE/__SIZE pre-declared at EVERY SCOPE w/ determined values
	default is 1) local and 2) local > global
	.global allows local to ALSO be global (still local in file)
	.weak reverses rule 2) WITH RESPECT TO LOCAL DEF

file creation
	follows uP Manual layout + limits (and ISA limits of words)
		file size
		RAM size
		everything within words (ISA or uP defined?)
	effectively adds ".bss" section by forcing pre-defed labels

debug
	adds NOP at every global variable (text)
	also pre-pends table to image with global variables
		gives name, HW section (TEXT/DATA), and (SW) address (in section)
		assumes a debugger exists to handle/parse
		table is plaintext- REMOVE PRIOR TO FLASHING
	note doubly labeled statements

removal
	removes any unused labels
	removes anything from label to next label WITHIN MATCHING SECTION
		ie unused text label removes text until nex text label
		applies to sections text/data/bss
	done recursively, removed sections may prompt more
	doesn't gurantee all dead code removal, nor only dead code removal
		(but should be safe in most cases...?)
	caution w/ doubly labeled statements

other
	comments (;)
	future consideration- aggressive unused warns
	future feature- better removal w/ sections
	future feature- static lib creation/behavior
	

