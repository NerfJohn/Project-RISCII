Software Retrospective ("Debrief of Software Design")
by John Eslinger
================================================================================
Table of Contents:
	-> Reflection on Process
	-> Notes on Current/Final Product
	-> Future Project Considerations
================================================================================
Reflection on Process:
	Positive Effects/Outcomes:
		-> Design Plan helped identify fine grain details ahead of time.
			(Identified token and node types needed for compiling)
			(Determined list of warnings and errors to check between stages)
			(Found niche issues- e.g. multiple intermediate values)
		-> Benchtesting per stage minimized propagated issues and debugging.
		-> Two phase testing strategy allowed for implicit system testing.
		
	Negative Effects/Outcomes:
		-> Various (internal) features were dropped in lieu of deadline goals.
		-> Printed info (e.g. warnings, verbose) not as helpful as desired.
		-> Source code is ill-formatted in both design and readability.
			(Overly niche functions/variables scattered throughout source code)
			(Many functions/enums/etc lack proper commenting/explanation)
			(Specific tasks/functionality lack well-written encapsulation)
	
	First Year Goals (June 2022 -> June 2023, Fox Valley):
		-> Completed Phase 1 of Project RISCII within first year!
			(Active for 9 months- October 2022 through June 2023)
			(Exact time/efforts varied with additional home/community projects)
		-> Original Project RISCII (from Fall 2020) also completed!
		-> An aditional goal achieved within first 12 months after moving.

================================================================================
Notes on Current/Final Product:
	Compiler Output Performance:
		-> Direct output (.asm, .hex) is good (give or take .asm formatting).
		-> Verbose/INFO output tends to be "spammy" and somewhat unhelpful.
			(Verbose effectively used as way to conduct stage benchtesting)
			(Messages tend to lack brevity (and, occasionally, helpful info))
		-> Warnings tend to be either easily triggered or overly niche.
		
	Testing Effectiveness:
		-> Many tests required re-write due to bad/misunderstood code.
			(Some tests didn't respect typing/sizing rules)
			(Other tests we're flat out wrong in their implementation)
			(Tests suggests "false positives" likely exist in the test suite)
		-> Various tests limited due to features being left out.
		-> Testbench remains effective, albeit limited, at its purpose.

================================================================================
Future Project Considerations:
	Refactoring Current Design:
		-> Rework stages in pairs for better synergy (e.g. scanning/parsing).
			(Some adjacent stages share many definitions and purposes)
			(Separate, but tandem designed stages, can improve code quality)
		-> Refactor abstract classes to better serve needs of concrete classes.
		-> Ensure each class has a single responsibility (i.e. SOLID rules).
	
	Software Feature Additions:
		-> Add multi-file compiling via preprocessing/linking.
		-> Implement variable type "modifiers" (i.e. structs, arrays, pointers).
		-> Improve front-end/back-end definition and interchangeability.
			(Better definitions ensure a more robust/realistic design) 
			(Separating sections can help "divide and conquer" the compiler)
			(Compiler should allow for additional front/back ends as desired)
	
	Future Preparations:
		-> Look into how compilers (namely gcc) handle various file types.
			(Future compiler will need to handle source and include files)
			(Should be able to create and compile assembly/binary libraries)
			(Look into various approaches to find best one for this compiler)
		-> Decide on list of features/strategies to use for future compiler.
		-> Determine way to directly test future compiler vs. gcc product.

================================================================================