Project RISCII Requirements ("General Vision/Plan")
by John Eslinger
================================================================================
Table of Contents:
	-> Hardware Design Plans
	-> Software Design Plans
================================================================================
Hardware Design Plans:
	Processor Design Specifications:
		-> 16-bit instructions (based on the x36 ISA- see ISA.txt)
		-> 16-bit architecture (ie 16-bit registers/operands/etc)
		-> Harvard-style architecture (ie completely separate code/data memory)
		-> Memory caches (L1 caches for instructions/data each)
		-> 5-stage pipeline processor 
			(Stages: FETCH, DECODE, EXECUTE, MEMORY, WRITEBACK)
			(Utilize pass-back/bypassing over stalling as able/appropriate)
			
	Cache/Memory Specifications:
		-> 64KB memory for instructions/data each
			(Read operation takes 2 clk cycles)
			(Write operation takes 4 clk cycles)
		-> 256-byte Direct Mapped Caches
			(Cache hit (read or write) returns data in 1 clk cycle)
			(Word = 2 bytes, Block Size = 4, Set Size = 1, Index Count = 32)
			(For 16-bit address: Higher byte = tag, Lower byte = cache address)
	
	Simplified Memory Interface:
		-> Inputs:
			inputDataBlock(64 bits): Data block to write to memory
			inputAddress(16 bits): Address to read/write from
			typeOfRequest(1 bit): Specifies request type: read or write
			startRequest(1 bit): Specifies when a request is made
		-> Outputs:
			outputDataBlock(64 bits): Data block read back from memory
			requestHandled(1 bit): Specifies when a request has been handled
		-> Memory can only handle one request at a time
			(Memory is considered 'busy' when handling a request)
			(Memory becomes busy when startRequest is asserted while not busy)
			(Memory becomes not busy when requestHandled is asserted)
		-> outputDataBlock is valid when requestHandled is asserted
		-> startRequest and requestHandled should only assert for one clk cycle
	
	Testing/Running Details:
		-> ModelSim will be used to test/run the hardware (within a simulation)
			(A Bash script will be used to call ModelSim properly/with ease)
			(The free version has a 10,000 line limit- just to keep in mind)
		-> The simulation should create the following setup:
			Two dummy memory modules- instruction(ROM) and data(RAM) memory
			One dummy clk/rst signal generator module
			One "package" module combining the memories, generator, and DUT
			One "control" script to facilitate testing/running
		-> The package module should provide the following signals:
			pwrOn(1 bit): Input to start/stop the package/DUT
			clk(1 bit): Output clk signal from the generator module
			data(16-bits): Output 2-byte value from RAM at address 0x0
			halt(1 bit): Output halt signal from DUT's WRITEBACK stage
		-> Simulation, by default, simply runs a given input file
			(Input file is read by ROM module into its memory)
			(Control script asserts 'pwrOn' signal until 'halt' is asserted)
			(Output file made with final 'data' result and 'clk' count)
		-> Simulation can have "-test" flag
			(Exits with error if 'halt' not asserted within set time)
			(Exits with error if 'halt' de-asserts within another set time)
			(Exits with error if 'data' changes while 'halt' is asserted)		

================================================================================
Software Design Plans:
	Language/Compiler Design Specifications:
		-> Subset of C programming language and GCC compiler
			(GCC should compile anything this compiler can compile)
			(Compiled programs should be functionally equivalent)
			(Use C and GCC standards for behavior not defined here)
		-> Compiles a single ".c" file into a single ".hex" file
		-> Function definitions and variable declarations made at global level
			(Functions must be defined in place)
			(Variables cannot be initialized in place)
			(Function "int main()" must exist to successfully compile)
		-> Allowed function statements (can be interleaved):
			"if" statement/block (if (EXPR) {STATEMENTS})
			"while" statement/block (while (EXPR) {STATEMENTS})
			"return" statement (return EXPR;)
			Variable declaration (char NAME; unsigned int NAME; etc...)
			Assignment (NAME = EXPR;)
			Function call (NAME(ARGS/EXPRS);)
		-> Single line comments (//) can be made on any line
	
	Data Type/Operator Specifications:
		-> Defined Data Types:
			char (signed 8-bit number, lvalue)
			unsigned char (unsigned 8-bit number, lvalue)
			int (signed 16-bit number, lvalue)
			unsigned int (unsigned 16-bit number, lvalue)
			char literal (character betwen tick apostrophes, rvalue)
			int literal (number, sometimes with negative sign, rvalue)
			hex literal (hex number beginning with "0x", rvalue)
		-> Allowed Operators
			Logical: 	&	|	^	~	<<	>>
			Arithmetic: +	-	(unary -)
			Boolean:	>	<	<=	>=	==	!=	!
			Other:		=	()
	
	Command Line Behavior:
		-> Compiler creates an executable based on an input file
			(Required input file is assumed to be written in C)
			(Output binary file is compiled form of input file)
			(Output file should be compatible with simulated hardware)
			(Output file(s) are only created if the compiler exits successfully)
		-> Optional flags:
			-h(help flag): prints out command line usage, then exits
			-v(verbose flag): prints out extra messages while running
			-s(assembly flag): creates assembly file along with binary file
			-O1(optimize flag): perform "win-win" optimizations
			-Werror(error flag): treat warnings as errors by failing/exiting
			-test(test flag): write result of main() to 0x0 in RAM
		-> Errors and Warnings
			(Errors and warnings are printed to stdout)
			(Error Format: "ERR!(line #): [description]")
			(Warning Format: "WARN!(line #): [description]")
			(First error found should cause the compiler to terminate/exit)
			
	Testing/Running Details:
		-> Tested via end-to-end testing with hardware
			("-test" ensures result of main() ends in address 0x0 in RAM)
			(Hardware's run script can run/read out address 0x0 in RAM)
			(Compiler can be checked via hardware- see hardware section above)
		-> Module/Part testing can be aided with extra flags
			("-v" should provide useful output regarding state of compilation)
			("-s" should provide a readable version of the compilation)
			("-Werror" should help ensure code is understood by compiler)		
	
================================================================================
