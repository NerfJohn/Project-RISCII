================================================================================
Project RISCII: Asm (Assembler) Design [Cliff Notes]
PR0004
"Description of internal and external design of RISCII assembler"
================================================================================
Info Already Present:

================================================================================
Info To Integrate:

SW Arch Layers
	App Layer    - business logic/high-level logic beign performed
	Device Layer - key processes and data structures of program
	Os Layer     - interface to OS ("Driver" layer for non embedded program)
	Domain Layer - various data structures/types conecting other layers
	Utils        - generic utilities/processes (basically abstracted procs)

Note:
Assembler is large process- state is effectively baked in business logic
Also, "input-process-output" model is less applicable (beyond basic use)

High-Level Assembler Process (Control):
- parse cmd line args
- read files
	- scan file to tokens
	- parse tokens to items
	- analyze items
	(per file- business logic reasons)
- check overall program
- translate program
	- last preps/checks for binary streaming
	- binary streaming to file

High-Level Assembler Process (Data):
- Cmd Line Parse : Get command line info into data model
- Read/Scan      : Get scan tokens (internal- saved raw vars)
- Read/Parse     : Get items (into model- vars still in raw-ish state)
- Read/Analyze   : Get info (into model- vars raw, focus on labels) 
- Checks         : Adjust info w/ checks (non-labels adjusted, but raw-ish)
- Trans/Prep     : To new struct (all in ordered struct and to binary)
- Trans/Bin      : --- (model is just outputting to a file)



================================================================================
