================================================================================
Project RISCII: JTAG Interface Notes
---
"Notes regarding operation and usage of MCU's JTAG port"
================================================================================
Table of Contents:
    -> Purpose
    -> Physical Pinout
    -> Hardware Architecture
    -> Available Commands

================================================================================
Purpose:

    This document is meant to document the JTAG port interface in terms of pin 
    usage, accessible architecture, and available commands. The intention is to 
    provide enough detail to guide designing both the board and interacting 
    hardware/software.
    
================================================================================
Physical Pinout:

    The JTAG port consists of 4 pins, used in similar (but necessarily 
    equivalent) fashion to the official JTAG standard pins. The table below 
    explains the expected port connection pins in more detail.
    
    == Pin Connections ==
    name | bitwidth | MCU active | direction | desc.
    -----+----------+------------+-----------+------
    TCK  | 1        | idle = low | to MCU    | Test Clock (given to MCU) 
    TDI  | 1        | ---        | to MCU    | Test Data In (data to MCU)
    TDO  | 1        | ---        | from MCU  | Test Data Out (data from MCU)
    TMS  | 1        | high       | to MCU    | Test Select (given to MCU)
    
    The JTAG port pins also work in similar fashion to the "storage" chip 
    interface's SPI pins (CPOL/CPHA = 0, MSb). This is to allow the JTAG port 
    hardware more easily work with the SPI hardware (for various JTAG features).
    
================================================================================
Hardware Architecture:

    The JTAG port's 4 pins allow it to shift data in and out of the MCU (via 
    TDI and TDO, respectively) at a custom clock speed (defined by TCK). The 
    TMS pin allows for directing the control flow of the JTAG port.
    
    Pins TDI, TDO, and TMS are sampled or updated on the rising edge of TCK. To 
    ensure the MCU has enough time to sample, process, and update the JTAG port 
    pins, TCK should limit itself to being 8x slower than the MCU's core clock.
    
    The JTAG port implements an internal state machine to interpret and process 
    the user input into commands and data. The tables below describe the JTAG 
    port's state machine, as well as the register accessible through it.

    == JTAG State Machine ==
    state name | state value | next state for TMS = 0,1 | desc.
    -----------+-------------+--------------------------+------
    IDLE       | 3'b000      | 0 -> I-SEL , 1 -> IDLE   | idle/reset state
    I-SEL      | 3'b001      | 0 -> I-SHFT, 1 -> D-SEL  | select "shift command"
    D-SEL      | 3'b101      | 0 -> D-SHFT, 1 -> IDLE   | select "shift data"
    I-SHFT     | 3'b100      | 0 -> I-SHFT, 1 -> UPDATE | shifting in command
    D-SHFT     | 3'b010      | 0 -> D-SHFT, 1 -> IDLE   | shifting in data
    UPDATE     | 3'b110      | 0 -> IDLE  , 1 -> IDLE   | execute given command

    == JTAG Accessible Registers ==
    register | width  | value on read  | desc.
    ---------+--------+----------------+------
    command  | 8-bit  | status bits    | report status, run given command
    data     | 16-bit | context driven | hold given data, often masked over
    
    When altering the contents of either register, only TCK rising edges that 
    occur while within the "SHFT" states shifts its contents. Thus, the clock 
    edge entering the state won't shift, but the exiting clock edge will.
    
    For the "command" register, shifting the register (ie I-SHFT state) will 
    report the MCU's "status" as described in the table below. The contents of 
    the register upon exiting will be attempted to be run as a command.
    
    == Status Bits ==
    field | name     | desc.
    ------+----------+------
    [7:2] | ---      | reserved- read as 0s
    [1]   | isPaused | indicates if MCU is in "paused" state
    [0]   | isBooted | indicates if MCU has booted (ie NOT in "booting" state)
    
    For the "data" register, shifting the register (ie D-SHFT state) will store 
    the given value until the register is shifted again (directly or indirectly 
    by being masked).

================================================================================
Available Commands:

    The JTAG port allows an external user to issue a small set of commands to 
    the MCU. These commands are intended to allow for HW/SW debugging and 
    programming. The table/paragraphs below describe the available commands.
    
    == Available Commands ==
    command        | code | requires | desc.
    ---------------+------+----------+------
    No Operation   | 0x00 | ---      | (Has no effect on JTAG/MCU)
    Set Address    | 0x01 | ---      | Set/save address as Memory address
    Read Memory    | 0x02 | Paused   | Read Memory address to data register
    Write Memory   | 0x03 | Paused   | Write data register to Memory address
    Access Scan    | 0x04 | Paused   | Scan register mapped over data register
    Access Storage | 0x05 | Paused   | Storage mapped over data register
    Run MCU        | 0x06 | Booted   | Set MCU to 'running' state
    Pause MCU      | 0x07 | Booted   | Set MCU to 'paused' state
    
    -- No Operation   (0x00) --
    Command has no effect on JTAG or MCU (ie intended for reading status bits). 
    Command unlocks any held resources.
    
    -- Set Address    (0x01) --
    Saves data register value to JTAG internal "address" register. Command 
    unlocks any held resources.
    
    -- Read Memory    (0x02) --
    Reads address (stored in address register) from memory chip into data 
    register. MCU must be in 'paused' state to have any effect. Command unlocks 
    any held resources.
    
    -- Write Memory   (0x03) --
    Writes data register value to address (stored in address register) in 
    memory chip. MCU must be in 'paused' state to have any effect. Command 
    unlocks any held resources.
    
    -- Access Scan    (0x04) --
    Maps (boundary) scan register over data register (ie accessing data 
    register re-routes to scan register). MCU must be in 'paused' state to have 
    any effect. Command unlocks held resources to lock hold on scan register.
    
    Below describes the layout of the boundary scan register. In general, each 
    probe has 3 bit fields allowing for read/write control of the supported 
    pins. In this case, probes, pins, and probed lines are synonymous terms.
    
    == Settings (per probed line) ==
    bit field | name     | desc.
    ----------+----------+------
    [0]       | input    | read/sampled line, doesn't sample while shifting
    [1]       | tristate | control for driving probe line (active HIGH)
    [2]       | output   | value to drive probed line to when driving

    == Probe Layout (index is per probe) ==
    probe position | name
    ---------------+-----
    [15:0]         | memory address    
    [31:16]        | memory data       
    [32]           | memory read/write 
    [33]           | memory enable     
    [34]           | storage SCK       
    [35]           | storage SDI       
    [36]           | storage SDO       
    [37]           | storage SCS       
    [53:38]        | GPIO              
    [54]           | status isPaused   
    [55]           | status isBooted
    
    For safety, probed lines are not driven while shifting in/out bits. Also, 
    writing to some probes disable writes to other probes to curb chances of 
    line contention. See below for these spcial probe disables.
    
    == Special Probe Disables ==
    probe name    | when driven, prevents driving
    --------------+------------------------------
    memory enable | memory data
    storage SCS   | storage SDI, storage SDO
    
    -- Access Storage (0x05) --
    Maps storage chip over data register (ie accessing data register re-routes 
    to storge chip). MCU must be in 'paused' state to have any effect. Command 
    unlocks any held resources to lock hold on storage chip.
    
    Accessing the mapped storage chip effectively relays the TCK, TDI, and TDO 
    pins to the storage chip's SCK, SDI, and SDO pins, respectively. As usual, 
    the TMS pin is used to break out of this relay connection.
    
    -- Run MCU        (0x06) --
    Sets MCU to 'running' state, allowing MCU to execute code. MCU must be in 
    'running' or 'paused' state to have any effect. Command unlocks any held 
    resources.
    
    -- Pause MCU      (0x07) --
    Sets MCU to 'paused' state, allowing JTAG to access/hold MCU resources. MCU 
    must be in 'running' or 'paused' state to have any effect. Command unlocks 
    any held resources.

================================================================================
