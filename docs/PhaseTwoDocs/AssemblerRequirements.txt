================================================================================
Project RISCII: Assembler Requirements
---
"User story, and consequent requirements, for the assembler/linker program"
================================================================================
Table of Contents:
	-> Purpose
	-> User Story

================================================================================
Purpose:

	This document is meant to provide the requirements of the assembler/linker 
	program. This is intended to provide a means to verify the program was 
	implemented correctly.
	
	Furthermore, a "user story" for the assembler/linker program is provided in 
	this document to understand the reason for each requirement. This is 
	intended as a soft form of validation for this part of the project.
	
================================================================================
User Story:

	For this project, a program is needed to convert assembly level 
	instructions and data across one or more files into (if successful) one 
	binary image that can be programmed and run on the RISCII processor.
	
	Instructions and their arguments are heavily based off of RISCII's 
	instruction set architecture. All instructions are added to the .text 
	section in the order they are given (give/take declaring a starting point).
	
	Global data can be declared as a word (ie 2 byte) or multi-byte value. Data 
	assigned non-zero values are placed in the .data section wheras zero or 
	uninitialized values are placed in the .bss section.
	
	Values (ie data and arguments) should be human readable (ie should not be 
	forced to write binary/hex code). Additionally, comments should be 
	supported to help make programs more understandable for human readers.
	
	Assembler/linker abstracts addresses from user with labels, which can be 
	tied to instructions or data. Special labels are built-in for declaring 
	and/or referencing start of program, .bss section, and free memory.
	
	The assembler/linker should support informative, but concise text output to 
	the user. Various levels of verbose output should be defined, and the user 
	should be allowed to choose how much output they would like.
	
	In the future, extra directives may be added to allow for specific binary 
	formatting. Command line flags may be added to run optimizations, use 
	pre-defined label names, or alter I/O (e.g. linker script, binary map file).

================================================================================

================================================================================