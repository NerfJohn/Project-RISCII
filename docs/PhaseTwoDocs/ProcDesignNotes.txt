Project RISCII: Processor Design Notes and Interfaces
---
("Notes regarding processor/interface design and FPGA implications")
================================================================================
Table of Contents:
    -> Envisioned Processor Pinout
    -> Processor Blocks/Pieces
================================================================================
Envisioned Processor Pinout:
    Processor GPIOs- 16 pins:
        -> 2 pins with jumpers to UART-USB IC
        -> 2 pins with jumpers to on-board I2C network
        -> 2 pins with jumpers to two (piezo) buzzers
        -> 2 pins with jumpers to buttons
        -> 8 pins open for development
            (potentially (two) jumpered buttons)
            (potentially (two) jumpered LEDs)
            (potentially (four) fully standalone GPIOs)
    
    External Memories- SPI Flash and Parallel RAM:
        -> SPI Flash used for persistent executable storage
            (4  pins for SPI control- MISO, MOSI, SEL, CS_n)
            (~2 pins for additional IC controls)
        -> Parallel RAM port for live executable and data storage
            (16 pins for address- 128 KB access two bytes at a time)
            (16 pins for data transfer- two bytes per access)
            (~4 pins for IC controls)
    
    Additional Processor Connections:
        -> 4-5 pins for JTAG connection to processor
        -> 2-3 pins for primary and secondary clock sources
        -> 1   pin for resetting processor
        -> 1-3 pins for hardwired status/debug signals (eg internal halt signal)
    
    Total Pinout (ie FPGA Requirements)- ~66-70 pins:
        -> 16  pins for processor GPIOs
        -> ~6  pins for processor SPI Flash
        -> ~36 pins for processor RAM
        -> 4-5 pins for processor JTAG
        -> 2-3 pins for processor clock sources
        -> 2-4 pins for hardwired processor IO (eg reset, halt signals)
            
================================================================================
Processor Blocks/Pieces:
    Processor Overview:
        -> CPU   16-bit core
        -> INT   12 priotized interrupts
        -> GPIO  16 GPIO pins
        -> TMR   4 timers
        -> UART  UART controller
        -> I2C   I2C controller (master/controller only)
        -> WDT   Watchdog Timer
        -> JTAG  JTAG access port (and related logic)
        -> SPI   SPI controller (connected to SPI Flash only)
        -> BOOT  Power-up/Reset logic
        -> MEM   Memory (bus) management logic
        -> OSC   Oscillator/Clock management logic
    
    Interrupt (INT) Block Overview:
        -> 12 individual interrupts/sources
            (4x for Timers (TMR)- one per timer)
            (2x for UART controller (UART)- TX and RX)
            (2x for I2C controller (I2C)- TX and Error)
            (2x for GPIOs (GPIO)- one per two pins)
            (1x for Flash controller (SPI)- TX complete)
            (1x for Stack Overflow Detector (part of CPU, accessed by MEM))
        -> Goals/Intentions
            (Allows to dynamic/event- driven code execution)
            (Useful for RTOS operations- scheduling, stack management, timing)
            (Priority levels establish deterministic execution order)
        -> Priority Order (from high to low)
            (Stack Overflow Detector)   - (Functional Error- Highest Priority)
            (I2C Controller- Error)     - (External Error- Higher Priority)
            (GPIO External Interrupts)  - (Quicker User Input)
            (UART Controller)           - (Quick User Input, Processor Output)
            (I2C Controller- TX)        - (Processor Output)
            (SPI Controller)            - (Effective Internal Source)
            (Timers)                    - (Internal Source)
    
    General Purpose Pin (GPIO) Block Overview:
        -> 16 individual pins
            (Memory mapped access point for reading and writing)
            (Configurable direction (and value as output), always readable)
            (Overridden by JTAG, peripherals may override output value)
        -> Goals/Intentions
            (Provide simplest form of user/processor communication)
            (Configurable access point for peripherals, debugging, and firmware)
            (Allow for external devices to communicate with processor internals)
        -> Alternate Functions (controlled by peripherals)
            (2x pins for UART controller (UART)- TX and RX)
            (2x pins for I2C controller (I2C)- SCL and SDA)
            (2x pins for timers (TMR)- one each, PWM0 and PWM1)
            (2x pins for pin interrupts (INT)- INT0 and INT1)
    
    Timer (TMR) Block Overview:
        -> 4 counters/timers
            (Memory mapped IC to track relative time)
            (Configurable clock source, pre-scalars/limits, and functions)
            (Allow for internal timing and external PWM signals)
        -> Goals/Intentions
            (2x timers geared for 'real time' counting/actions (eg 1 ms timer))
            (2x timers geared for PWM generation (eg simple digital audio))
            (All timers capable of simple relative time tracking)
        -> Special Functions
            (Interrupts triggered by an implicit set of timer to 0)
            (PWM timers can override GPIO pins to output signal to board)
            (Settings for starting/stopping, precision, and interrupt enabling)
    
    Serial Controllers (UART, I2C) Blocks Overview:
        -> UART and I2C controllers
            (Memory mapped ICs for common serial protocols)
            (Configurable speeds and status/control data (I2C is master only)
            (Semi-independent ICs to handle bit banging on processor's behalf)
        -> Goals/Intentions
            (Communication with Host PC (ie UART to UART/USB IC on board))
            (Additional sensor/input data (ie I2C to I2C network on board))
            (Flashing application over UART (ie from PC to bootloader))
        -> Additional Resources
            (4x pins reserved for serial controllers- 2 pins per IC)
            (UART interrupts- TX byte complete and RX byte complete)
            (I2C interrupts- TX byte complete and TX byte error)
    
    Watchdog and Oscillator (WDT, OSC) Blocks Overview:
        -> Semi-configurable ICs
            (Memory mapped ICs to handle clocking/hardware stability)
            (Minor configurations to select clock source and watchdog mode)
            (Partially hardwired specs for simplicity (eg watchdog timeout))
        -> Goals/Intentions
            (Select between external clocks (ie provided by IC on board))
            (Select between disabling watchdog or providing heartbeat)
            (Default to reset or slow internal clock for timeout/clock issues)
        -> Additional Considerations
            (Clock selection requires safe switching logic)
            (Hardwired watchdog timeout doesn't require programming/fuse bits)
            (FPGA limitations may affect oscillator abilities)
    
    Memory (SPI, MEM) Blocks Overview:
        -> Memory Architecture
            (Memory mapped SPI Flash used for program storage- not execution)
            (RAM stores executed code and data- one port ONLY)
            (Logic to manage bus tying external RAM and peripherals)
        -> Goals/Intentions
            (Provide access to SPI Flash for programming and loading to RAM)
            (Manage instruction vs data vs peripheral accesses for processor)
            (Allow processor to control SPI Flash (ie bootloader flashing)
        -> Additinal Considerations
            (SPI interrupt- TX complete)
            (JTAG may require more direct access than memory mapped SPI)
            (Memory bus shares internal signals, though some should be explict)
	
	JTAG Port (JTAG) Block Overview:
		-> Hardware access point
			(Provides way to override pins and access internal registers)
			(Independent IC from the processor- intended for Host PC use)
			(Few configurable registers for hardware breakpoints)
		-> Goals/Intentions
			(Allow for boundary scan for hardware/board debugging)
			(Can program device by writing SPI Flash)
			(Can read/write to RAM and set hardware breakpoints)
		-> Features/Considerations
			(JTAG has special access to hardware breakpoints and CPU registers)
			(JTAG instruction interface should include RAM read/write commands)
			(Commands for flashing SPI Flash vs RAM accessing SPI Flash)
	
	Hardware Booting (BOOT) Block Overview:
		-> "First" logic to run upon power-up and/or reset
		-> Manages resetting processor and loading code from SPI Flash
		-> Sets a memory mapped register with reason of last reset
    
================================================================================
