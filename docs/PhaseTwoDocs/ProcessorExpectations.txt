================================================================================
Project RISCII: Processor Expectations
---
"Document outlining expectation/requirements of the microprocessor design"
================================================================================
Table of Contents:
    -> Summary
    -> Expectations
================================================================================
Summary:

    This document is meant to provide a record of the intended behavior of the
    RISCII soft-core microprocessor. Descriptions are not strictly targeted
    towards validation or verfication, though should provide enough detail to
    generally infer either. When possible, descriptions should use proper
    requirement writing (e.g. shall, while, when, etc).
    
    Due to the nature of the RISCII microprocessor being soft-core (ie run on
    an FPGA), some descriptions may make assumptions or constraints on the FGPA
    itself (e.g. clock signal is stable by the time the microprocessor powers
    up). These descriptions should be treaded carefully between the
    microprocessor and board design phases.
    
    For the rest of this document, the RISCII soft-core microprocessor is
    referred to as a custom designed circuit, NOT an FPGA design. The RISCII
    microprocessor may also be referred to as "processor" or "MCU".
	
	Expectations shall be labelled as "REQ-###". At present, there are 30 documented expectations.

================================================================================
-> Expectations:

	-- Clocking --

	-> REQ-000: MCU shall support a clock input pin
		(external pin on MCU- subject to pin expectations)
	
	-> REQ-001: MCU shall support running up to 8.333 MHz
		(ie 50 MHz / 6 on development setup)
		(effectively 8 MHz + some deviation)
	
	-> REQ-002: MCU shall function for a square wave provided to the clock pin
		(ie clock pin expects a square wave)
		
	-- Architecture --
	
	-> REQ-003: MCU shall use a 16-bit architecture
		(ie operands and results are stored as 16-bit values)
		(pointers are 16-bit values, thus 64 KB of byte addressing)
	
	-> REQ-004: MCU shall use storage and memory address spaces
		(ie two different address 0x0000, 0x0001, etc)
	
	-> REQ-005: MCU shall support the following high level states
		name    | desc.
		--------+------
		booting | MCU is preparing itself to run the binary image
		running | MCU is running the binary image
		paused  | MCU is paused for debugging, or has been halted
	
	-- Memory --
	
	-> REQ-006: MCU shall support 64 KB of storage address space
		(space used for nonvolatile storage of binary image)
	
	-> REQ-007: MCU shall support 32 KB of free memory address space
		(ie RAM addresses, free to use at program's leisure)
	
	-> REQ-008: MCU shall support 32 KB of mapped memory address space
		(mapped to various MCU peripherals- not all used per say)
	
	-- Pinout --
	
	-> REQ-029: MCU shall support the following pins/pin groups
		name    | # of pins | direction | desc.
		--------+-----------+-----------+------
		Clock   | 1         | -> MCU    | Main Clock Signal
		Reset   | 1         | -> MCU    | External Reset Input
		JTAG    | 4         | -> MCU -> | JTAG Connector
		Memory  | 34        | -> MCU -> | Parallel Volatile Memory Connector
		Storage | 4         | -> MCU -> | SPI Non-Volatile Storage Connector
		GPIO    | 16        | -> MCU -> | General Purpose Input/Output Pins
		Status  | 2         | MCU ->    | MCU Status Indicators
	
	-> REQ-009: The following pins shall synchronize any inputs before use
		name    | # of pins | direction | desc.
		--------+-----------+-----------+------
		Reset   | 1         | -> MCU    | External Reset Input
		JTAG    | 4         | -> MCU -> | JTAG Connector
		GPIO    | 16        | -> MCU -> | General Purpose Input/Output Pins
		Status  | 2         | MCU ->    | MCU Status Indicators
	
	-> REQ-010: The following pins shall be subject to boundary scanning
		name    | # of pins | direction | desc.
		--------+-----------+-----------+------
		Memory  | 34        | -> MCU -> | Parallel Volatile Memory Connector
		Storage | 4         | -> MCU -> | SPI Non-Volatile Storage Connector
		GPIO    | 16        | -> MCU -> | General Purpose Input/Output Pins
		Status  | 2         | MCU ->    | MCU Status Indicators
	
	-> REQ-011: Pins shall only have one driving circuit at any time
		(this affects boundary scan, output, and inout pins)
		(this should be consistent across MCU states and circuit settings)
	
	-> REQ-012: Pins shall have a given direction at any time
		(every pin should have a given direction at any time)
		(this should be consistent across MCU states and circuit settings)
	
	-> REQ-013: Pins shall have a "default level" as sensible to their role
		(if a pin can be an output, it should have a known "default level")
		(if a pin is an input, special "default levels" should be noted)
	
	-- JTAG Port/Connection --
	
    -> REQ-014: MCU shall support 4 pins for JTAG use
        pin name | default level | direction |description
        ---------+---------------+-----------+-----------
        TCK      | 0             | -> MCU    | Test Clock, for transfer rate
        TMS      | 1             | -> MCU    | Test Select, for selecting state
        TDI      | 0             | -> MCU    | Test Data In, for input data
        TDO      | 0             | MCU ->    | Test Data Out, for output data
	
	-> REQ-015: MCU shall synchronize JTAG pins before using them
		(inputs are syncrhonized to Main Clock before use)
		(outputs are updated on positive edge of Main Clock)
	
	-> REQ-016: MCU shall update TMS, TDI, and TDO based on TCK
		(TCK's rising edge should trigger TMS and TDI sampling)
        (TCK's rising edge should trigger TDO's updating)
	
    -> REQ-017: TCK shall run at least 8x slower than the MCU's main clock
        (this gives the MCU some time to synch and process the inputs)
        
    -> REQ-018: While MCU is in the "booting" state, JTAG is unresponsive
        (JTAG effectively makes connected J-Link think it's disconnected)
    
    -> REQ-019: While MCU is in the "running" state, JTAG is on standby
        (JTAG is responsive to J-Link, but cannot access MCU resources)
        (JTAG should effectively only be able to set MCU to "paused")
    
    -> REQ-020: While MCU is in the "paused" state, JTAG has full control
        (JTAG can access resources typically used by MCU)
        
    -> REQ-021: JTAG shall support direct shift access to instruction register
        (this is typical of standard JTAG- TDI is used to input bits)
        (there should effectively be a "shift instruction" state in JTAG)
    
    -> REQ-022: Shifting JTAG instruction register shall indicate MCU's status
        (shall report if MCU is "booting", "running", or "paused")
        (initial value shifted out of instruction register indicates status)
    
    -> REQ-023: Shifting into JTAG instruction register shall execute a command
        (command based on final value left within instruction register)
	
	-> REQ-024: JTAG shall supports commands that can do the following
		action               | req. state | desc.
		---------------------+------------+------
		Access Memory        | paused     | Read/Write Memory
		Access Storage       | paused     | Read/Write Storage
		Access Scan Register | paused     | Read/Write Boundary Scan Register
		Pause MCU            | running    | Pause MCU, sets to "pause" state
		Run MCU              | paused     | Run MCU, sets to "running" state
	
	-> REQ-025: Executing a JTAG command shall reset resouce accesses
		(JTAG should not be accessing Memory, Storage, and Scan simultaneously)
		(this has effects on raw pin controls)
    
    -> REQ-026: JTAG shall support direct shift access to the data register
        (this is typical of standard JTAG- TDI is used to input bits)
        (there should effectively be a "shift data" state in JTAG)
	
	-> REQ-027: Shifting JTAG data register shall shift data in/out of resource
		(source of data relies on what is being access at the moment)
    
    -> REQ-028: JTAG's shift scheme shall match Storage connector's shift scheme
        (Serial shift most significant bit first)
        (Polarity and Phase match the Storage's target Polarity/Phase)

================================================================================